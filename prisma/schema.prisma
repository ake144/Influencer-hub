// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // make sure your DATABASE_URL points to Neon PostgreSQL
}


model User {
  id                 String                  @id @default(cuid()) // Unique user ID
  name               String
  clerkUserId        String                  @unique
  email              String                  @unique
  phone              String?
  bio                String?
  followers          Int?
  profilePic         String?
  tgUsername         String?
  role               String                  @default("influencer")
  createdAt          DateTime                @default(now())
  campaigns          Campaign[]              @relation("CampaignOwner")
  applications       InfluencerApplication[]
  sentMessages       Message[]               @relation("SentMessages") // Messages sent by the user
  receivedMessages   Message[]               @relation("ReceivedMessages") // Messages received by the user
}

model Campaign {
  id                 String                  @id @default(cuid()) // Updated to String with cuid()
  title              String
  description        String
  createdBy          String                  // Foreign key to User (business owner)
  owner              User                    @relation("CampaignOwner", fields: [createdBy], references: [id])
  budgetId           String
  budget             Budget                  @relation(fields: [budgetId], references: [id])
  timelineId         String
  timeline           Timeline                @relation(fields: [timelineId], references: [id])
  createdAt          DateTime                @default(now())
  appliedInfluencers InfluencerApplication[]
  requirements       Requirement[] // Campaign-specific requirements
}

model InfluencerApplication {
  id         String   @id @default(cuid()) // Updated to String with cuid()
  userId     String   // Foreign key to User (influencer)
  user       User     @relation(fields: [userId], references: [id])
  campaignId String   // Foreign key to Campaign
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  status     String   // Application status: pending, accepted, rejected
  createdAt  DateTime @default(now())
}

model Requirement {
  id         String   @id @default(cuid()) // Updated to String with cuid()
  text       String   // Requirement description
  campaignId String   // Foreign key to Campaign
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Budget {
  id      String   @id @default(cuid()) // Updated to String with cuid()
  total   Float    // Total campaign budget
  perPost Float    // Budget per post

  Campaign Campaign[]
}

model Timeline {
  id                  String   @id @default(cuid()) // Updated to String with cuid()
  applicationDeadline DateTime
  campaignStart       DateTime
  campaignEnd         DateTime

  Campaign Campaign[]
}

model Message {
  id           String   @id @default(cuid()) // Unique message ID
  content      String   // The body of the message
  senderId     String   // Foreign key referencing the sender (User.id)
  sender       User     @relation("SentMessages", fields: [senderId], references: [id]) // Relation to the sender
  recipientId  String   // Foreign key referencing the recipient (User.id)
  recipient    User     @relation("ReceivedMessages", fields: [recipientId], references: [id]) // Relation to the recipient
  createdAt    DateTime @default(now()) // Timestamp when the message was created
}

// model Metrics {
//   id             Int        @id @default(autoincrement())
//   totalReach     Int // Total audience reach
//   engagementRate Float // Engagement rate percentage
//   applicants     Int // Total number of applicants
//   Campaign       Campaign[]
// }
